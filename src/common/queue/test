cMessage *NDPQueue::enqueue(cMessage *msg)
{
//    std::cout << "  NDPQueue::enqueue.\n";
    IPv4Datagram *ipv4Datagram = dynamic_cast<IPv4Datagram *>(PK(msg));



//      raptorq::RQSegment *rqSeg = dynamic_cast<raptorq::RQSegment *>(ipv4Datagram->getEncapsulatedPacket());

      ndp::NDPSegment *rqSeg = dynamic_cast<ndp::NDPSegment *>(ipv4Datagram->getEncapsulatedPacket());
//
    if ( rqSeg->getAckBit()==true || rqSeg->getSynBit()==true || rqSeg->getNackBit()==true) { // getNACK for NDP not RQ (use this line with NDP)
//  if ( rqSeg->getAckBit()==true || rqSeg->getSynBit()==true) {   // this line for RQ and TCP not NDP
        synAckQueue.insert(msg);
        synAckQueueLength=synAckQueue.getLength();
        emit(synAckQueueLengthSignal, synAckQueue.getLength());
        return nullptr;
    }

    if (rqSeg->getIsHeader() == true ) {
//        std::cout << "  getIsHeader.\n";

        headersQueue.insert(msg);
        headersQueueLength = headersQueue.getLength();
        emit(headersQueueLengthSignal, headersQueue.getLength());
        return nullptr;
    }

    if (rqSeg->getIsPullPacket() == true ) {
//        std::cout << "  getIsHeader.\n";
        headersQueue.insert(msg);
        headersQueueLength = headersQueue.getLength();
        emit(headersQueueLengthSignal, headersQueue.getLength());

        return nullptr;
    }


    // dataQueue is Full ==> trim and insert header in the headersQueue
//    if ( dataQueue.getLength() >= frameCapacity || rqSeg->getAckBit()==true || rqSeg->getSynBit()==true) {
    if ( dataQueue.getLength() >= frameCapacity) {
//        std::cout << "Queue full, trimming packet.\n";
//        ipv4Datagram->decapsulate(); //no need to remove the transport segment, which is added below with zero payLoad length

        std::string header="Header-";

        if (rqSeg != nullptr) {
            std::string name=rqSeg->getName();
            std::string rename=header+name;
            rqSeg->setName(rename.c_str());
//            rqSeg->setPayloadLength(1);
            rqSeg->setIsHeader(true);
            rqSeg->setIsDataPacket(false);


//            ipv4Datagram->encapsulate(rqSeg); no need
//            ipv4Datagram->setTotalLengthField(1); no need
              ipv4Datagram->setName(rename.c_str());
              ipv4Datagram->setByteLength(0);

             //            std::cout  << "  !******************  Receiver $$$$$$$$$$$$$$$$$  HEADER arrived.  " << std::endl;

            unsigned short srcPort = rqSeg->getSrcPort();
            unsigned short destPort = rqSeg->getDestPort();
            EV << "   hhh   " << srcPort << "\n\n\n\n";
            EV << "   hhh   " << destPort << "\n\n\n\n";
            EV << "   hhh   " << rqSeg->getFullName() << "\n\n\n\n";
        }

//        cMessage *msg = dynamic_cast<cMessage *>(ipv4Datagram); no need
//        EV << "   hhh getDestAddress " << ipv4Datagram->getDestAddress().str() << "\n";
//        EV << "   hhh  getSrcAddress" << ipv4Datagram->getSrcAddress().str() << "\n\n\n\n";

        headersQueue.insert(msg);
        headersQueueLength=headersQueue.getLength();
        emit(headersQueueLengthSignal, headersQueue.getLength());


        ++numTrimmedPkt;
        numTrimmedPacketsVec.record(numTrimmedPkt);
        emit(numTrimmedPktSig, numTrimmedPkt);

        return nullptr;
//        return msg;
    } else {
       // dataQueue is not full ==> insert the incoming packet in the dataQueue
        dataQueue.insert(msg);
        emit(dataQueueLengthSignal, dataQueue.getLength());
        dataQueueLength=dataQueue.getLength();
        return nullptr;
    }
    return nullptr;
}