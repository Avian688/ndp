//
// Generated file, do not edit! Created by nedtool 5.6 from transportlayer/contract/ndp/NDPCommand.msg.
//

#ifndef __INET_NDPCOMMAND_M_H
#define __INET_NDPCOMMAND_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// cplusplus {{
#include "inet/networklayer/common/L3Address.h"
// }}


namespace inet {

/**
 * Enum generated from <tt>transportlayer/contract/ndp/NDPCommand.msg:18</tt> by nedtool.
 * <pre>
 * //
 * // NDPR command codes, sent by the application to NDPR. These constants
 * // should be set as message kind on a message sent to the NDPR entity.
 * //
 * // \@see ~NDPRCommand, ~NDPROpenCommand, ~IRaptoNDP
 * //
 * enum NDPCommandCode
 * {
 *     NDP_C_OPEN_ACTIVE = 1;   // active open (must carry ~NDPOpenCommand)
 *     NDP_C_OPEN_PASSIVE = 2;  // passive open (must carry ~NDPOpenCommand)
 *     NDP_C_SEND = 3;          // send data (set on data packet)
 *     NDP_C_CLOSE = 5;         // "I have no more data to send"
 *     NDP_C_ABORT = 6;         // abort connection
 *     NDP_C_STATUS = 7;        // request status info (NDP_I_STATUS) from NDP
 *     NDP_C_QUEUE_BYTES_LIMIT = 8; // set send queue limit (in bytes)
 *     NDP_C_READ = 9;       // send request to NDP to deliver data
 * }
 * </pre>
 */
enum NDPCommandCode {
    NDP_C_OPEN_ACTIVE = 1,
    NDP_C_OPEN_PASSIVE = 2,
    NDP_C_SEND = 3,
    NDP_C_CLOSE = 5,
    NDP_C_ABORT = 6,
    NDP_C_STATUS = 7,
    NDP_C_QUEUE_BYTES_LIMIT = 8,
    NDP_C_READ = 9
};

/**
 * Enum generated from <tt>transportlayer/contract/ndp/NDPCommand.msg:37</tt> by nedtool.
 * <pre>
 * //
 * // NDP indications, sent by NDP to the application. NDP will set these
 * // constants as message kind on messages it sends to the application.
 * //
 * // \@see ~NDPCommand, ~NDPStatusInfo, ~INDP
 * //
 * enum NDPStatusInd
 * {
 *     NDP_I_DATA = 1;              // data packet (set on data packet)
 *     NDP_I_URGENT_DATA = 2;       // urgent data (set on data packet)
 *     NDP_I_ESTABLISHED = 3;       // connection established
 *     NDP_I_PEER_CLOSED = 4;       // FIN received from remote NDP
 *     NDP_I_CLOSED = 5;            // connection closed normally (via FIN exchange)
 *     NDP_I_CONNECTION_REFUSED = 6; // connection refused
 *     NDP_I_CONNECTION_RESET = 7;  // connection reset
 *     NDP_I_TIMED_OUT = 8;         // conn-estab timer went off, or max retransm. count reached
 *     NDP_I_STATUS = 9;            // status info (will carry ~NDPStatusInfo)
 *     NDP_I_SEND_MSG = 10;         // send queue abated, send more messages
 *     NDP_I_DATA_NOTIFICATION = 11; // notify the upper layer that data has arrived
 * }
 * </pre>
 */
enum NDPStatusInd {
    NDP_I_DATA = 1,
    NDP_I_URGENT_DATA = 2,
    NDP_I_ESTABLISHED = 3,
    NDP_I_PEER_CLOSED = 4,
    NDP_I_CLOSED = 5,
    NDP_I_CONNECTION_REFUSED = 6,
    NDP_I_CONNECTION_RESET = 7,
    NDP_I_TIMED_OUT = 8,
    NDP_I_STATUS = 9,
    NDP_I_SEND_MSG = 10,
    NDP_I_DATA_NOTIFICATION = 11
};

/**
 * Enum generated from <tt>transportlayer/contract/ndp/NDPCommand.msg:56</tt> by nedtool.
 * <pre>
 * //
 * // Currently not in use.
 * //
 * enum NDPErrorCode
 * {
 * }
 * </pre>
 */
enum NDPErrorCode {
};

/**
 * Class generated from <tt>transportlayer/contract/ndp/NDPCommand.msg:61</tt> by nedtool.
 * <pre>
 * class NDPCommand
 * {
 *     int connId = -1;   // identifies the socket within the application
 *     int userId = -1;   // id than can be freely used by the app
 * 
 *     unsigned int numRcvTrimmedHeader = 0;
 * }
 * </pre>
 */
class NDPCommand : public ::omnetpp::cObject
{
  protected:
    int connId;
    int userId;
    unsigned int numRcvTrimmedHeader;

  private:
    void copy(const NDPCommand& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NDPCommand&);

  public:
    NDPCommand();
    NDPCommand(const NDPCommand& other);
    virtual ~NDPCommand();
    NDPCommand& operator=(const NDPCommand& other);
    virtual NDPCommand *dup() const override {return new NDPCommand(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getConnId() const;
    virtual void setConnId(int connId);
    virtual int getUserId() const;
    virtual void setUserId(int userId);
    virtual unsigned int getNumRcvTrimmedHeader() const;
    virtual void setNumRcvTrimmedHeader(unsigned int numRcvTrimmedHeader);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const NDPCommand& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, NDPCommand& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>transportlayer/contract/ndp/NDPCommand.msg:70</tt> by nedtool.
 * <pre>
 * class NDPErrorInfo extends NDPCommand
 * {
 *     int errorCode \@enum(NDPErrorCode);
 *     string messageText;
 * }
 * </pre>
 */
class NDPErrorInfo : public ::inet::NDPCommand
{
  protected:
    int errorCode;
    ::omnetpp::opp_string messageText;

  private:
    void copy(const NDPErrorInfo& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NDPErrorInfo&);

  public:
    NDPErrorInfo();
    NDPErrorInfo(const NDPErrorInfo& other);
    virtual ~NDPErrorInfo();
    NDPErrorInfo& operator=(const NDPErrorInfo& other);
    virtual NDPErrorInfo *dup() const override {return new NDPErrorInfo(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getErrorCode() const;
    virtual void setErrorCode(int errorCode);
    virtual const char * getMessageText() const;
    virtual void setMessageText(const char * messageText);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const NDPErrorInfo& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, NDPErrorInfo& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>transportlayer/contract/ndp/NDPCommand.msg:77</tt> by nedtool.
 * <pre>
 * class NDPOpenCommand extends NDPCommand
 * {
 *     L3Address localAddr;
 *     L3Address remoteAddr;
 *     int localPort = -1;
 *     int remotePort = -1;
 * 
 *     string ndpAlgorithmClass;
 * 
 *     unsigned int priorityValue;
 *     unsigned int numPacketsToSend;
 *     bool isLongFlow;
 *     bool isSender;
 *     bool isReceiver;
 * }
 * </pre>
 */
class NDPOpenCommand : public ::inet::NDPCommand
{
  protected:
    L3Address localAddr;
    L3Address remoteAddr;
    int localPort;
    int remotePort;
    ::omnetpp::opp_string ndpAlgorithmClass;
    unsigned int priorityValue;
    unsigned int numPacketsToSend;
    bool isLongFlow;
    bool isSender;
    bool isReceiver;

  private:
    void copy(const NDPOpenCommand& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NDPOpenCommand&);

  public:
    NDPOpenCommand();
    NDPOpenCommand(const NDPOpenCommand& other);
    virtual ~NDPOpenCommand();
    NDPOpenCommand& operator=(const NDPOpenCommand& other);
    virtual NDPOpenCommand *dup() const override {return new NDPOpenCommand(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual L3Address& getLocalAddr();
    virtual const L3Address& getLocalAddr() const {return const_cast<NDPOpenCommand*>(this)->getLocalAddr();}
    virtual void setLocalAddr(const L3Address& localAddr);
    virtual L3Address& getRemoteAddr();
    virtual const L3Address& getRemoteAddr() const {return const_cast<NDPOpenCommand*>(this)->getRemoteAddr();}
    virtual void setRemoteAddr(const L3Address& remoteAddr);
    virtual int getLocalPort() const;
    virtual void setLocalPort(int localPort);
    virtual int getRemotePort() const;
    virtual void setRemotePort(int remotePort);
    virtual const char * getNdpAlgorithmClass() const;
    virtual void setNdpAlgorithmClass(const char * ndpAlgorithmClass);
    virtual unsigned int getPriorityValue() const;
    virtual void setPriorityValue(unsigned int priorityValue);
    virtual unsigned int getNumPacketsToSend() const;
    virtual void setNumPacketsToSend(unsigned int numPacketsToSend);
    virtual bool getIsLongFlow() const;
    virtual void setIsLongFlow(bool isLongFlow);
    virtual bool getIsSender() const;
    virtual void setIsSender(bool isSender);
    virtual bool getIsReceiver() const;
    virtual void setIsReceiver(bool isReceiver);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const NDPOpenCommand& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, NDPOpenCommand& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>transportlayer/contract/ndp/NDPCommand.msg:95</tt> by nedtool.
 * <pre>
 * class NDPSendCommand extends NDPCommand
 * {
 * }
 * </pre>
 */
class NDPSendCommand : public ::inet::NDPCommand
{
  protected:

  private:
    void copy(const NDPSendCommand& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NDPSendCommand&);

  public:
    NDPSendCommand();
    NDPSendCommand(const NDPSendCommand& other);
    virtual ~NDPSendCommand();
    NDPSendCommand& operator=(const NDPSendCommand& other);
    virtual NDPSendCommand *dup() const override {return new NDPSendCommand(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const NDPSendCommand& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, NDPSendCommand& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>transportlayer/contract/ndp/NDPCommand.msg:100</tt> by nedtool.
 * <pre>
 * class NDPConnectInfo extends NDPCommand
 * {
 *     L3Address localAddr;
 *     L3Address remoteAddr;
 *     int localPort;
 *     int remotePort;
 * }
 * </pre>
 */
class NDPConnectInfo : public ::inet::NDPCommand
{
  protected:
    L3Address localAddr;
    L3Address remoteAddr;
    int localPort;
    int remotePort;

  private:
    void copy(const NDPConnectInfo& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NDPConnectInfo&);

  public:
    NDPConnectInfo();
    NDPConnectInfo(const NDPConnectInfo& other);
    virtual ~NDPConnectInfo();
    NDPConnectInfo& operator=(const NDPConnectInfo& other);
    virtual NDPConnectInfo *dup() const override {return new NDPConnectInfo(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual L3Address& getLocalAddr();
    virtual const L3Address& getLocalAddr() const {return const_cast<NDPConnectInfo*>(this)->getLocalAddr();}
    virtual void setLocalAddr(const L3Address& localAddr);
    virtual L3Address& getRemoteAddr();
    virtual const L3Address& getRemoteAddr() const {return const_cast<NDPConnectInfo*>(this)->getRemoteAddr();}
    virtual void setRemoteAddr(const L3Address& remoteAddr);
    virtual int getLocalPort() const;
    virtual void setLocalPort(int localPort);
    virtual int getRemotePort() const;
    virtual void setRemotePort(int remotePort);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const NDPConnectInfo& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, NDPConnectInfo& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>transportlayer/contract/ndp/NDPCommand.msg:109</tt> by nedtool.
 * <pre>
 * class NDPStatusInfo extends NDPCommand
 * {
 *     int state;
 *     string stateName;
 * 
 *     L3Address localAddr;
 *     L3Address remoteAddr;
 *     int localPort;
 *     int remotePort;
 * 
 *     unsigned int snd_mss;
 * 
 * }
 * </pre>
 */
class NDPStatusInfo : public ::inet::NDPCommand
{
  protected:
    int state;
    ::omnetpp::opp_string stateName;
    L3Address localAddr;
    L3Address remoteAddr;
    int localPort;
    int remotePort;
    unsigned int snd_mss;

  private:
    void copy(const NDPStatusInfo& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NDPStatusInfo&);

  public:
    NDPStatusInfo();
    NDPStatusInfo(const NDPStatusInfo& other);
    virtual ~NDPStatusInfo();
    NDPStatusInfo& operator=(const NDPStatusInfo& other);
    virtual NDPStatusInfo *dup() const override {return new NDPStatusInfo(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getState() const;
    virtual void setState(int state);
    virtual const char * getStateName() const;
    virtual void setStateName(const char * stateName);
    virtual L3Address& getLocalAddr();
    virtual const L3Address& getLocalAddr() const {return const_cast<NDPStatusInfo*>(this)->getLocalAddr();}
    virtual void setLocalAddr(const L3Address& localAddr);
    virtual L3Address& getRemoteAddr();
    virtual const L3Address& getRemoteAddr() const {return const_cast<NDPStatusInfo*>(this)->getRemoteAddr();}
    virtual void setRemoteAddr(const L3Address& remoteAddr);
    virtual int getLocalPort() const;
    virtual void setLocalPort(int localPort);
    virtual int getRemotePort() const;
    virtual void setRemotePort(int remotePort);
    virtual unsigned int getSnd_mss() const;
    virtual void setSnd_mss(unsigned int snd_mss);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const NDPStatusInfo& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, NDPStatusInfo& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_NDPCOMMAND_M_H

