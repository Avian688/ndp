//
// Generated file, do not edit! Created by nedtool 5.6 from transportlayer/Ndp/ndp_common/NdpHeader.msg.
//

#ifndef __INET__NDP_NDPHEADER_M_H
#define __INET__NDP_NDPHEADER_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif


namespace inet {
namespace ndp {

class SackItem;
class Sack;
class NdpOption;
class NdpOptionEnd;
class NdpOptionNop;
class NdpOptionMaxSegmentSize;
class NdpOptionWindowScale;
class NdpOptionSackPermitted;
class NdpOptionSack;
class NdpOptionTimestamp;
class NdpOptionUnknown;
class NdpHeader;
} // namespace ndp
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "inet/transportlayer/contract/TransportHeaderBase_m.h" // import inet.transportlayer.contract.TransportHeaderBase


namespace inet {
namespace ndp {

// cplusplus {{
const B NDP_MIN_HEADER_LENGTH = B(20);  // default NDP header length: 20 bytes without options
const B NDP_MAX_HEADER_LENGTH = B(60);  // maximum NDP header length (base + options): 60 = 15 * 4 bytes

const B NDP_OPTIONS_MAX_SIZE     = B(40);  // 40 bytes, 15 * 4 bytes (15 is the largest number in 4 bits length data offset field), TCP_MAX_HEADER_OCTETS - TCP_HEADER_OCTETS = 40
const B NDP_OPTION_HEAD_SIZE = B(2);       // 2 bytes, type and length
const B NDP_OPTION_SACK_MIN_SIZE = B(10);  // 10 bytes, option length = 8 * n + 2 bytes (NOP)
const B NDP_OPTION_SACK_ENTRY_SIZE = B(8); // sack entry size
const B NDP_OPTION_TS_SIZE       = B(12);  // 12 bytes, option length = 10 bytes + 2 bytes (NOP)
// }}

/**
 * Enum generated from <tt>transportlayer/Ndp/ndp_common/NdpHeader.msg:19</tt> by nedtool.
 * <pre>
 * enum NdpConstants
 * {
 *     // maximum allowed sack entry number, if no other options are used
 *     NDP_MAX_SACK_ENTRIES = 4;
 * }
 * </pre>
 */
enum NdpConstants {
    NDP_MAX_SACK_ENTRIES = 4
};

/**
 * Enum generated from <tt>transportlayer/Ndp/ndp_common/NdpHeader.msg:32</tt> by nedtool.
 * <pre>
 * //
 * // NDP Option Numbers
 * // Reference: http://www.iana.org/assignments/tcp-parameters/
 * // Date: 2011-07-02
 * //
 * // Note: Options not yet implemented should stay commented out
 * //
 * enum NdpOptionNumbers
 * {
 *     NDPOPTION_END_OF_OPTION_LIST = 0;                   // RFC 793, LENGTH: 1 Byte
 *     NDPOPTION_NO_OPERATION = 1;                         // RFC 793, LENGTH: 1 Byte
 *     NDPOPTION_MAXIMUM_SEGMENT_SIZE = 2;                 // RFC 793, LENGTH: 4 Bytes
 *     NDPOPTION_WINDOW_SCALE = 3;                         // RFC 1323, LENGTH: 3 Bytes
 *     NDPOPTION_SACK_PERMITTED = 4;                       // RFC 2018, LENGTH: 2 Bytes
 *     NDPOPTION_SACK = 5;                                 // RFC 2018, LENGTH: N (max. N = 4) 8 * n + 2 Bytes  => 32 + 2 + 2 * NOP = 36 Bytes; If TIMESTAMP option is used with SACK: max. n = 3 => 12 Bytes (for Timestamp) + 28 Bytes (for SACK) = 40 Bytes
 *     NDPOPTION_TIMESTAMP = 8;                            // RFC 1323, LENGTH: 10 Bytes
 * }
 * </pre>
 */
enum NdpOptionNumbers {
    NDPOPTION_END_OF_OPTION_LIST = 0,
    NDPOPTION_NO_OPERATION = 1,
    NDPOPTION_MAXIMUM_SEGMENT_SIZE = 2,
    NDPOPTION_WINDOW_SCALE = 3,
    NDPOPTION_SACK_PERMITTED = 4,
    NDPOPTION_SACK = 5,
    NDPOPTION_TIMESTAMP = 8
};

/**
 * Class generated from <tt>transportlayer/Ndp/ndp_common/NdpHeader.msg:46</tt> by nedtool.
 * <pre>
 * //
 * // This structure represents a single SACK (selective acknowledgment):
 * //
 * class SackItem extends cObject
 * {
 *     unsigned int start;     // start seq no. of sack block
 *     unsigned int end;       // end seq no. of sack block
 * }
 * </pre>
 */
class SackItem : public ::omnetpp::cObject
{
  protected:
    unsigned int start = 0;
    unsigned int end = 0;

  private:
    void copy(const SackItem& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SackItem&);

  public:
    SackItem();
    SackItem(const SackItem& other);
    virtual ~SackItem();
    SackItem& operator=(const SackItem& other);
    virtual SackItem *dup() const override {return new SackItem(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual unsigned int getStart() const;
    virtual void setStart(unsigned int start);
    virtual unsigned int getEnd() const;
    virtual void setEnd(unsigned int end);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SackItem& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SackItem& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>transportlayer/Ndp/ndp_common/NdpHeader.msg:52</tt> by nedtool.
 * <pre>
 * class Sack extends SackItem
 * {
 * }
 * </pre>
 */
class Sack : public ::inet::ndp::SackItem
{
  protected:

  private:
    void copy(const Sack& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Sack&);

  public:
    Sack();
    Sack(const Sack& other);
    virtual ~Sack();
    Sack& operator=(const Sack& other);
    virtual Sack *dup() const override {return new Sack(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods

  public:
    Sack(unsigned int start_par, unsigned int end_par) { setSegment(start_par, end_par); }
    virtual bool empty() const;
    virtual bool contains(const Sack& other) const;
    virtual void clear();
    virtual void setSegment(unsigned int start_par, unsigned int end_par);
    virtual std::string str() const override;
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Sack& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Sack& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>transportlayer/Ndp/ndp_common/NdpHeader.msg:67</tt> by nedtool.
 * <pre>
 * // Header Options (optional):
 * class NdpOption extends cObject
 * {
 *     \@packetData;
 *     NdpOptionNumbers kind;            // option kind
 *     unsigned short length = 1;                    // option length
 * }
 * </pre>
 */
class NdpOption : public ::omnetpp::cObject
{
  protected:
    inet::ndp::NdpOptionNumbers kind = static_cast<inet::ndp::NdpOptionNumbers>(-1);
    unsigned short length = 1;

  private:
    void copy(const NdpOption& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NdpOption&);

  public:
    NdpOption();
    NdpOption(const NdpOption& other);
    virtual ~NdpOption();
    NdpOption& operator=(const NdpOption& other);
    virtual NdpOption *dup() const override {return new NdpOption(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual inet::ndp::NdpOptionNumbers getKind() const;
    virtual void setKind(inet::ndp::NdpOptionNumbers kind);
    virtual unsigned short getLength() const;
    virtual void setLength(unsigned short length);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const NdpOption& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, NdpOption& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>transportlayer/Ndp/ndp_common/NdpHeader.msg:74</tt> by nedtool.
 * <pre>
 * class NdpOptionEnd extends NdpOption
 * {
 *     kind = NDPOPTION_END_OF_OPTION_LIST;
 *     length = 1;
 * }
 * </pre>
 */
class NdpOptionEnd : public ::inet::ndp::NdpOption
{
  protected:

  private:
    void copy(const NdpOptionEnd& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NdpOptionEnd&);

  public:
    NdpOptionEnd();
    NdpOptionEnd(const NdpOptionEnd& other);
    virtual ~NdpOptionEnd();
    NdpOptionEnd& operator=(const NdpOptionEnd& other);
    virtual NdpOptionEnd *dup() const override {return new NdpOptionEnd(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const NdpOptionEnd& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, NdpOptionEnd& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>transportlayer/Ndp/ndp_common/NdpHeader.msg:80</tt> by nedtool.
 * <pre>
 * class NdpOptionNop extends NdpOption
 * {
 *     kind = NDPOPTION_NO_OPERATION;
 *     length = 1;
 * }
 * </pre>
 */
class NdpOptionNop : public ::inet::ndp::NdpOption
{
  protected:

  private:
    void copy(const NdpOptionNop& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NdpOptionNop&);

  public:
    NdpOptionNop();
    NdpOptionNop(const NdpOptionNop& other);
    virtual ~NdpOptionNop();
    NdpOptionNop& operator=(const NdpOptionNop& other);
    virtual NdpOptionNop *dup() const override {return new NdpOptionNop(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const NdpOptionNop& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, NdpOptionNop& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>transportlayer/Ndp/ndp_common/NdpHeader.msg:86</tt> by nedtool.
 * <pre>
 * class NdpOptionMaxSegmentSize extends NdpOption
 * {
 *     kind = NDPOPTION_MAXIMUM_SEGMENT_SIZE;
 *     length = 4;
 *     uint16_t maxSegmentSize;   // uint16_t
 * }
 * </pre>
 */
class NdpOptionMaxSegmentSize : public ::inet::ndp::NdpOption
{
  protected:
    uint16_t maxSegmentSize = 0;

  private:
    void copy(const NdpOptionMaxSegmentSize& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NdpOptionMaxSegmentSize&);

  public:
    NdpOptionMaxSegmentSize();
    NdpOptionMaxSegmentSize(const NdpOptionMaxSegmentSize& other);
    virtual ~NdpOptionMaxSegmentSize();
    NdpOptionMaxSegmentSize& operator=(const NdpOptionMaxSegmentSize& other);
    virtual NdpOptionMaxSegmentSize *dup() const override {return new NdpOptionMaxSegmentSize(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual uint16_t getMaxSegmentSize() const;
    virtual void setMaxSegmentSize(uint16_t maxSegmentSize);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const NdpOptionMaxSegmentSize& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, NdpOptionMaxSegmentSize& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>transportlayer/Ndp/ndp_common/NdpHeader.msg:93</tt> by nedtool.
 * <pre>
 * class NdpOptionWindowScale extends NdpOption
 * {
 *     kind = NDPOPTION_WINDOW_SCALE;
 *     length = 3;
 *     unsigned short windowScale;   // uint8_t
 * }
 * </pre>
 */
class NdpOptionWindowScale : public ::inet::ndp::NdpOption
{
  protected:
    unsigned short windowScale = 0;

  private:
    void copy(const NdpOptionWindowScale& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NdpOptionWindowScale&);

  public:
    NdpOptionWindowScale();
    NdpOptionWindowScale(const NdpOptionWindowScale& other);
    virtual ~NdpOptionWindowScale();
    NdpOptionWindowScale& operator=(const NdpOptionWindowScale& other);
    virtual NdpOptionWindowScale *dup() const override {return new NdpOptionWindowScale(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual unsigned short getWindowScale() const;
    virtual void setWindowScale(unsigned short windowScale);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const NdpOptionWindowScale& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, NdpOptionWindowScale& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>transportlayer/Ndp/ndp_common/NdpHeader.msg:100</tt> by nedtool.
 * <pre>
 * class NdpOptionSackPermitted extends NdpOption
 * {
 *     kind = NDPOPTION_SACK_PERMITTED;
 *     length = 2;
 * }
 * </pre>
 */
class NdpOptionSackPermitted : public ::inet::ndp::NdpOption
{
  protected:

  private:
    void copy(const NdpOptionSackPermitted& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NdpOptionSackPermitted&);

  public:
    NdpOptionSackPermitted();
    NdpOptionSackPermitted(const NdpOptionSackPermitted& other);
    virtual ~NdpOptionSackPermitted();
    NdpOptionSackPermitted& operator=(const NdpOptionSackPermitted& other);
    virtual NdpOptionSackPermitted *dup() const override {return new NdpOptionSackPermitted(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const NdpOptionSackPermitted& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, NdpOptionSackPermitted& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>transportlayer/Ndp/ndp_common/NdpHeader.msg:106</tt> by nedtool.
 * <pre>
 * class NdpOptionSack extends NdpOption
 * {
 *     kind = NDPOPTION_SACK;
 *     length = 2;     // 2 + getSackArraySize() * 8
 *     SackItem sackItem[];
 * }
 * </pre>
 */
class NdpOptionSack : public ::inet::ndp::NdpOption
{
  protected:
    SackItem *sackItem = nullptr;
    size_t sackItem_arraysize = 0;

  private:
    void copy(const NdpOptionSack& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NdpOptionSack&);

  public:
    NdpOptionSack();
    NdpOptionSack(const NdpOptionSack& other);
    virtual ~NdpOptionSack();
    NdpOptionSack& operator=(const NdpOptionSack& other);
    virtual NdpOptionSack *dup() const override {return new NdpOptionSack(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual void setSackItemArraySize(size_t size);
    virtual size_t getSackItemArraySize() const;
    virtual const SackItem& getSackItem(size_t k) const;
    virtual SackItem& getSackItemForUpdate(size_t k) { return const_cast<SackItem&>(const_cast<NdpOptionSack*>(this)->getSackItem(k));}
    virtual void setSackItem(size_t k, const SackItem& sackItem);
    virtual void insertSackItem(const SackItem& sackItem);
    virtual void insertSackItem(size_t k, const SackItem& sackItem);
    virtual void eraseSackItem(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const NdpOptionSack& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, NdpOptionSack& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>transportlayer/Ndp/ndp_common/NdpHeader.msg:113</tt> by nedtool.
 * <pre>
 * class NdpOptionTimestamp extends NdpOption
 * {
 *     kind = NDPOPTION_TIMESTAMP;
 *     length = 10;
 *     uint32_t senderTimestamp;
 *     uint32_t echoedTimestamp;
 * }
 * </pre>
 */
class NdpOptionTimestamp : public ::inet::ndp::NdpOption
{
  protected:
    uint32_t senderTimestamp = 0;
    uint32_t echoedTimestamp = 0;

  private:
    void copy(const NdpOptionTimestamp& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NdpOptionTimestamp&);

  public:
    NdpOptionTimestamp();
    NdpOptionTimestamp(const NdpOptionTimestamp& other);
    virtual ~NdpOptionTimestamp();
    NdpOptionTimestamp& operator=(const NdpOptionTimestamp& other);
    virtual NdpOptionTimestamp *dup() const override {return new NdpOptionTimestamp(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual uint32_t getSenderTimestamp() const;
    virtual void setSenderTimestamp(uint32_t senderTimestamp);
    virtual uint32_t getEchoedTimestamp() const;
    virtual void setEchoedTimestamp(uint32_t echoedTimestamp);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const NdpOptionTimestamp& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, NdpOptionTimestamp& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>transportlayer/Ndp/ndp_common/NdpHeader.msg:121</tt> by nedtool.
 * <pre>
 * class NdpOptionUnknown extends NdpOption
 * {
 *     kind = static_cast<NdpOptionNumbers>(-1);
 *     uint8_t bytes[];
 * }
 * </pre>
 */
class NdpOptionUnknown : public ::inet::ndp::NdpOption
{
  protected:
    uint8_t *bytes = nullptr;
    size_t bytes_arraysize = 0;

  private:
    void copy(const NdpOptionUnknown& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NdpOptionUnknown&);

  public:
    NdpOptionUnknown();
    NdpOptionUnknown(const NdpOptionUnknown& other);
    virtual ~NdpOptionUnknown();
    NdpOptionUnknown& operator=(const NdpOptionUnknown& other);
    virtual NdpOptionUnknown *dup() const override {return new NdpOptionUnknown(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual void setBytesArraySize(size_t size);
    virtual size_t getBytesArraySize() const;
    virtual uint8_t getBytes(size_t k) const;
    virtual void setBytes(size_t k, uint8_t bytes);
    virtual void insertBytes(uint8_t bytes);
    virtual void insertBytes(size_t k, uint8_t bytes);
    virtual void eraseBytes(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const NdpOptionUnknown& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, NdpOptionUnknown& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>transportlayer/Ndp/ndp_common/NdpHeader.msg:141</tt> by nedtool.
 * <pre>
 * //
 * // Represents a NDP segment, to be used with the ~NDP module.
 * //
 * // NDP header fields not explicitly modelled: work on going
 * // - Data Offset (number of 32 bit words in the header): represented
 * //   by cMessage::length().
 * // - Reserved (reserved for future use)
 * // - Checksum (header checksum): modelled by cMessage::hasBitError()
 * // - Header Options: Currently only EOL, NOP, MSS, WS, SACK_PERMITTED, SACK and TS are implemented
 * // - Padding
 * //
 * // cMessage::getKind() may be set to an arbitrary value: NDP entities will
 * // ignore it and use only the header fields (synBit, ackBit, rstBit).
 * //
 * class NdpHeader extends TransportHeaderBase
 * {
 *     chunkLength = NDP_MIN_HEADER_LENGTH;
 * 
 *     // Source Port
 *     unsigned short srcPort;
 * 
 *     // Destination Port
 *     unsigned short destPort;
 * 
 *     // Sequence Number: first sequence number of the first data octet
 *     // in the respective segment (except if SYN is set; then the the
 *     // seq. number is the initial seq. number (ISS) and the first data
 *     // octet is ISS + 1)
 *     //unsigned int sequenceNo;
 * 
 *     // Acknowledgement Number: if ACK flag is set, this field contains
 *     // the next sequence number the sender of this segment is expecting
 *     // to receive
 *     unsigned int ackNo;
 *     unsigned int nackNo;
 * 
 *     bool isHeader;
 *     bool isPullPacket;
 *     bool isDataPacket;
 *     bool isLongFlow;
 *     unsigned int priorityValue;
 *     unsigned int numPacketsToSend;
 *     unsigned int pullSequenceNumber;
 *     unsigned int dataSequenceNumber;
 *     bool isLastPktToSend;
 *     bool ackBit;
 *     bool nackBit;
 *     // NDP Header Length - default: 20 bytes
 *     // if header options are used the headerLength is greater than 20 bytes (default)
 *     B headerLength = NDP_MIN_HEADER_LENGTH; // NDP_MIN_HEADER_LENGTH = 20 bytes
 * 
 *     bool urgBit; // URG: urgent pointer field significant if set
 *     bool pshBit; // PSH: push function
 *     bool rstBit; // RST: reset the connection
 *     bool synBit; // SYN: synchronize seq. numbers
 *     bool finBit; // FIN: finish - no more data from sender
 * 
 *     // Window Size: the number of data octets beginning with the one indicated
 *     // in the acknowledgement field which the sender of this segment is
 *     // willing to accept
 *     unsigned short window;
 * 
 *     // Urgent Pointer: communicates the current value of the urgent pointer
 *     // as a positive offset from the sequence number in this segment. The
 *     // urgent pointer points to the sequence number of the octet following
 *     // the urgent data. This field is only be interpreted in segments with
 *     // the URG control bit set.
 *     unsigned short urgentPointer;
 * 
 *     // Header options (optional)
 *     // Currently only EOL, NOP, MSS, WS, SACK_PERMITTED, SACK and TS are implemented
 *     NdpOption *headerOption[] \@owned;
 * }
 * </pre>
 */
class NdpHeader : public ::inet::TransportHeaderBase
{
  protected:
    unsigned short srcPort = 0;
    unsigned short destPort = 0;
    unsigned int ackNo = 0;
    unsigned int nackNo = 0;
    bool isHeader_ = false;
    bool isPullPacket_ = false;
    bool isDataPacket_ = false;
    bool isLongFlow_ = false;
    unsigned int priorityValue = 0;
    unsigned int numPacketsToSend = 0;
    unsigned int pullSequenceNumber = 0;
    unsigned int dataSequenceNumber = 0;
    bool isLastPktToSend_ = false;
    bool ackBit = false;
    bool nackBit = false;
    B headerLength = NDP_MIN_HEADER_LENGTH;
    bool urgBit = false;
    bool pshBit = false;
    bool rstBit = false;
    bool synBit = false;
    bool finBit = false;
    unsigned short window = 0;
    unsigned short urgentPointer = 0;
    NdpOption * *headerOption = nullptr;
    size_t headerOption_arraysize = 0;

  private:
    void copy(const NdpHeader& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NdpHeader&);

  public:
    NdpHeader();
    NdpHeader(const NdpHeader& other);
    virtual ~NdpHeader();
    NdpHeader& operator=(const NdpHeader& other);
    virtual NdpHeader *dup() const override {return new NdpHeader(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual unsigned short getSrcPort() const;
    virtual void setSrcPort(unsigned short srcPort);
    virtual unsigned short getDestPort() const;
    virtual void setDestPort(unsigned short destPort);
    virtual unsigned int getAckNo() const;
    virtual void setAckNo(unsigned int ackNo);
    virtual unsigned int getNackNo() const;
    virtual void setNackNo(unsigned int nackNo);
    virtual bool isHeader() const;
    virtual void setIsHeader(bool isHeader);
    virtual bool isPullPacket() const;
    virtual void setIsPullPacket(bool isPullPacket);
    virtual bool isDataPacket() const;
    virtual void setIsDataPacket(bool isDataPacket);
    virtual bool isLongFlow() const;
    virtual void setIsLongFlow(bool isLongFlow);
    virtual unsigned int getPriorityValue() const;
    virtual void setPriorityValue(unsigned int priorityValue);
    virtual unsigned int getNumPacketsToSend() const;
    virtual void setNumPacketsToSend(unsigned int numPacketsToSend);
    virtual unsigned int getPullSequenceNumber() const;
    virtual void setPullSequenceNumber(unsigned int pullSequenceNumber);
    virtual unsigned int getDataSequenceNumber() const;
    virtual void setDataSequenceNumber(unsigned int dataSequenceNumber);
    virtual bool isLastPktToSend() const;
    virtual void setIsLastPktToSend(bool isLastPktToSend);
    virtual bool getAckBit() const;
    virtual void setAckBit(bool ackBit);
    virtual bool getNackBit() const;
    virtual void setNackBit(bool nackBit);
    virtual B getHeaderLength() const;
    virtual void setHeaderLength(B headerLength);
    virtual bool getUrgBit() const;
    virtual void setUrgBit(bool urgBit);
    virtual bool getPshBit() const;
    virtual void setPshBit(bool pshBit);
    virtual bool getRstBit() const;
    virtual void setRstBit(bool rstBit);
    virtual bool getSynBit() const;
    virtual void setSynBit(bool synBit);
    virtual bool getFinBit() const;
    virtual void setFinBit(bool finBit);
    virtual unsigned short getWindow() const;
    virtual void setWindow(unsigned short window);
    virtual unsigned short getUrgentPointer() const;
    virtual void setUrgentPointer(unsigned short urgentPointer);
    virtual void setHeaderOptionArraySize(size_t size);
    virtual size_t getHeaderOptionArraySize() const;
    virtual const NdpOption * getHeaderOption(size_t k) const;
    virtual NdpOption * getHeaderOptionForUpdate(size_t k) { handleChange();return const_cast<NdpOption *>(const_cast<NdpHeader*>(this)->getHeaderOption(k));}
    virtual NdpOption * dropHeaderOption(size_t k);
    virtual void setHeaderOption(size_t k, NdpOption * headerOption);
    virtual void insertHeaderOption(NdpOption * headerOption);
    virtual void insertHeaderOption(size_t k, NdpOption * headerOption);
    virtual void eraseHeaderOption(size_t k);

  public:
    /**
     * Returns RFC 793 specified SEG.LEN:
     *     SEG.LEN = the number of octets occupied by the data in the segment
     *               (counting SYN and FIN)
     *
     */
    uint32_t getSynFinLen() const { return (finBit ? 1 : 0) + (synBit ? 1 : 0); }

    /** Calculate Length of NDP Options Array in bytes */
    virtual B getHeaderOptionArrayLength();

    /** Drops all NDP options of the NDP segment */
    virtual void dropHeaderOptions();

    // implements TransportHeaderBase functions:
    virtual unsigned int getSourcePort() const override { return getSrcPort(); }
    virtual void setSourcePort(unsigned int port) override { setSrcPort(port); }
    virtual unsigned int getDestinationPort() const override { return getDestPort(); }
    virtual void setDestinationPort(unsigned int port) override { setDestPort(port); }
    virtual std::string str() const override;
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const NdpHeader& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, NdpHeader& obj) {obj.parsimUnpack(b);}

} // namespace ndp
} // namespace inet

#endif // ifndef __INET__NDP_NDPHEADER_M_H

